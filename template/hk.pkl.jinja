amends "package://github.com/jdx/hk/releases/download/v1.1.2/hk@1.1.2#/Config.pkl"
import "package://github.com/jdx/hk/releases/download/v1.1.2/hk@1.1.2#/Builtins.pkl"

local linters = new Mapping<String, Step> {
    // ["prettier"] = Builtins.prettier

    ["cspell"] {
        glob = "*"
        check = "cspell lint -c .config/cspell.yaml --quiet {% raw %}{{files}}{% endraw %}"
    }
    ["markdownlint"] {
        glob = "*.{md{% if is_template %}{% raw %},md[{]% endif %[}]{% endraw %}{% endif %}}"
        stage = "*.{md{%- if is_template %}{% raw %},md[{]% endif %[}]{% endraw %}{% endif %}}"
        check = "markdownlint-cli2 --config .config/.markdownlint.yaml {% raw %}{{ files }}{% endraw %}"
        fix = "markdownlint-cli2 --config .config/.markdownlint.yaml --fix {% raw %}{{ files }}{% endraw %}"
        exclude = "{CHANGELOG.md}"
    } 
    ["pkl"] {
        glob = "*.pkl"
        check = "pkl eval {% raw %}{{files}}{% endraw %} >/dev/null"
    }
    ["yamllint"]  {
        glob = "*.{yml,yaml{% if is_template %}{% raw %},yml[{]% endif %[}],yaml[{]% endif %[}]}{% endraw %}{% endif %}}"
        check = "yamllint -c .config/.yamllint.yaml {% raw %}{{ files }}{% endraw %}"
        exclude = "{.copier-answers.yml}"
    } 
}

hooks {
    ["pre-commit"] {
        fix = true    // automatically modify files with available linter fixes
        stash = "git" // stashes unstaged changes while running fix steps
        steps {
            ...linters // add all linters defined above
        }
    }
    // instead of pre-commit, you can instead define pre-push hooks
    ["pre-push"] {
        steps = linters
    }
    // "fix" and "check" are special steps for `hk fix` and `hk check` commands
    ["fix"] {
        fix = true
        steps = linters
    }
    ["check"] {
        steps = linters
    }
}
